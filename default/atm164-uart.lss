
atm164-uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  000002b6  0000034a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800126  00800126  00000370  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000135  00000000  00000000  00000ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000002fd  00000000  00000000  00000c16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000dc  00000000  00000000  00000f13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000308  00000000  00000000  00000fef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000090  00000000  00000000  000012f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000014c  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000002b  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000002b  00000000  00000000  000014ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__vector_15>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_18>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_20>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_21>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d4 e0       	ldi	r29, 0x04	; 4
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e6 eb       	ldi	r30, 0xB6	; 182
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a6 32       	cpi	r26, 0x26	; 38
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	11 e0       	ldi	r17, 0x01	; 1
  a0:	a6 e2       	ldi	r26, 0x26	; 38
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a4 33       	cpi	r26, 0x34	; 52
  aa:	b1 07       	cpc	r27, r17
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 04 01 	call	0x208	; 0x208 <main>
  b2:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <__vector_21>:

//volatile enum statemachine usartState;


//ISR при отправке байта
ISR (USART0_UDRE_vect) {
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	ef 93       	push	r30
  ce:	ff 93       	push	r31
	if (isReceiving == 1) return; //если USART недавно получил байт данных, то он его сразу же отправил
  d0:	80 91 32 01 	lds	r24, 0x0132
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	11 f1       	breq	.+68     	; 0x11c <__vector_21+0x62>

	isReceiving = 0;
  d8:	10 92 32 01 	sts	0x0132, r1

	if (buffer_index == buffer_MAX) { // Вывели весь буффер? 
  dc:	20 91 33 01 	lds	r18, 0x0133
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	80 91 23 01 	lds	r24, 0x0123
  e6:	90 91 24 01 	lds	r25, 0x0124
  ea:	28 17       	cp	r18, r24
  ec:	39 07       	cpc	r19, r25
  ee:	31 f4       	brne	.+12     	; 0xfc <__vector_21+0x42>
	UCSR0B &=~ (1<<UDRIE0); // Запрещаем прерывание по опустошению - передача закончена
  f0:	80 91 c1 00 	lds	r24, 0x00C1
  f4:	8f 7d       	andi	r24, 0xDF	; 223
  f6:	80 93 c1 00 	sts	0x00C1, r24
  fa:	0b c0       	rjmp	.+22     	; 0x112 <__vector_21+0x58>
	}
	else {
	UDR0 = buffer[buffer_index];	// Берем данные из буффера. 
  fc:	80 91 33 01 	lds	r24, 0x0133
 100:	e0 91 2e 01 	lds	r30, 0x012E
 104:	f0 91 2f 01 	lds	r31, 0x012F
 108:	e8 0f       	add	r30, r24
 10a:	f1 1d       	adc	r31, r1
 10c:	80 81       	ld	r24, Z
 10e:	80 93 c6 00 	sts	0x00C6, r24
	}
	
	buffer_index++;			// Увеличиваем индекс
 112:	80 91 33 01 	lds	r24, 0x0133
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	80 93 33 01 	sts	0x0133, r24
}
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	3f 91       	pop	r19
 126:	2f 91       	pop	r18
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <__vector_20>:

//ISR при получении байта
ISR (USART0_RX_vect) {
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
	char ReceivedByte;
	ReceivedByte = UDR0;
 142:	e6 ec       	ldi	r30, 0xC6	; 198
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
	UDR0 = ReceivedByte;
 148:	80 83       	st	Z, r24
	isReceiving = 1;
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	80 93 32 01 	sts	0x0132, r24
	isPacketEnds = 0;
 150:	10 92 28 01 	sts	0x0128, r1
}
 154:	ff 91       	pop	r31
 156:	ef 91       	pop	r30
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <__vector_18>:

//ISR таймера-0, 8 bit
ISR (TIMER0_OVF_vect) {
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	8f 93       	push	r24
	if (TCNT0 > 2) {
 170:	86 b5       	in	r24, 0x26	; 38
 172:	83 30       	cpi	r24, 0x03	; 3
 174:	40 f0       	brcs	.+16     	; 0x186 <__vector_18+0x22>
	TCNT0 = 0;
 176:	16 bc       	out	0x26, r1	; 38
	if (isReceiving == 0) isPacketEnds = 1;
 178:	80 91 32 01 	lds	r24, 0x0132
 17c:	88 23       	and	r24, r24
 17e:	19 f4       	brne	.+6      	; 0x186 <__vector_18+0x22>
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	80 93 28 01 	sts	0x0128, r24
	}
}
 186:	8f 91       	pop	r24
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <__vector_15>:


//ISR таймера-1, 16 bit
ISR (TIMER1_OVF_vect) {
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
	PORTD = PORTD ^ (1<<PD4); // toggle LED
 1a0:	8b b1       	in	r24, 0x0b	; 11
 1a2:	90 e1       	ldi	r25, 0x10	; 16
 1a4:	89 27       	eor	r24, r25
 1a6:	8b b9       	out	0x0b, r24	; 11
	TCNT1 = 0xfff0; //устанавливаем начальное значение счётчика
 1a8:	80 ef       	ldi	r24, 0xF0	; 240
 1aa:	9f ef       	ldi	r25, 0xFF	; 255
 1ac:	90 93 85 00 	sts	0x0085, r25
 1b0:	80 93 84 00 	sts	0x0084, r24
	timerOverflow++;
 1b4:	80 91 29 01 	lds	r24, 0x0129
 1b8:	8f 5f       	subi	r24, 0xFF	; 255
 1ba:	80 93 29 01 	sts	0x0129, r24
}
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	0f 90       	pop	r0
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	0f 90       	pop	r0
 1c8:	1f 90       	pop	r1
 1ca:	18 95       	reti

000001cc <timer1Init>:

//инициализация таймера 1, 16 бит
void timer1Init(void) {
	//TCCR1B = (1<<CS12) | (0<<CS11) | (0<<CS10); // Timer clock = I/O clock / 256
	TCCR1B = (0 << CS12) | (1 << CS11) | (1 << CS10); // Timer clock = I/O clock / 64
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	80 93 81 00 	sts	0x0081, r24
	TIFR1 = 1 << TOV1; // Clear overflow flag
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	86 bb       	out	0x16, r24	; 22
	TIMSK1 = 1 << TOIE1; //Enable Overflow Interrupt
 1d6:	80 93 6f 00 	sts	0x006F, r24
}
 1da:	08 95       	ret

000001dc <timer0Init>:

//инициализация таймера 0, 8 бит. Таймер окончания передачи - один раз за 64 такта
void timer0Init(void) {
	TCCR0B = (0 << CS02) | (1 << CS01) | (1 << CS00); // Timer clock = I/O clock / 64
 1dc:	83 e0       	ldi	r24, 0x03	; 3
 1de:	85 bd       	out	0x25, r24	; 37
	TIFR0 = 1 << TOV0; // Clear overflow flag
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	85 bb       	out	0x15, r24	; 21
	TIMSK0 = 1 << TOIE0; //Enable Overflow Interrupt
 1e4:	80 93 6e 00 	sts	0x006E, r24
}
 1e8:	08 95       	ret

000001ea <usartInit>:


void usartInit (void) {
	UBRR0H = (ubrr>>8);
 1ea:	80 91 01 01 	lds	r24, 0x0101
 1ee:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (ubrr);
 1f2:	80 91 00 01 	lds	r24, 0x0100
 1f6:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0C = 0x06; // Set frame format: 8data, 1stop bit
 1fa:	86 e0       	ldi	r24, 0x06	; 6
 1fc:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B = ((1<<TXEN0) | (1<<RXEN0) | (1<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0));
 200:	88 e9       	ldi	r24, 0x98	; 152
 202:	80 93 c1 00 	sts	0x00C1, r24
}
 206:	08 95       	ret

00000208 <main>:
mind for your future projects!
*/


int main() {
	DDRD  |= (1<<PD4);	//конфигурим PD4 как выход
 208:	54 9a       	sbi	0x0a, 4	; 10
	PORTD = 255;
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	8b b9       	out	0x0b, r24	; 11
		         
	cli();
 20e:	f8 94       	cli
	timerOverflow = 0;
 210:	10 92 29 01 	sts	0x0129, r1
	usartInit();
 214:	0e 94 f5 00 	call	0x1ea	; 0x1ea <usartInit>
	timer0Init();
 218:	0e 94 ee 00 	call	0x1dc	; 0x1dc <timer0Init>
	timer1Init();
 21c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <timer1Init>
    //set_sleep_mode(SLEEP_MODE_IDLE);
	sei();
 220:	78 94       	sei

	while(1) {

	if (timerOverflow == 10) { //запускаем передачу после 10-и переполнений таймера
	timerOverflow = 11;
 222:	eb e0       	ldi	r30, 0x0B	; 11
	buffer_index = 0;		// Сбрасываем индекс
	buffer = data2;
 224:	4d e0       	ldi	r20, 0x0D	; 13
 226:	51 e0       	ldi	r21, 0x01	; 1
	UCSR0B |= (1<<UDRIE0);	// Разрешаем прерывание UDRE
	}

	if (timerOverflow == 20) { //запускаем передачу после 10-и переполнений таймера
	//usartState = packetSending;
	timerOverflow = 21;
 228:	75 e1       	ldi	r23, 0x15	; 21
	buffer_index = 0;		// Сбрасываем индекс
	buffer = data1;
 22a:	22 e0       	ldi	r18, 0x02	; 2
 22c:	31 e0       	ldi	r19, 0x01	; 1

	if (timerOverflow == 25) { //запускаем передачу после 10-и переполнений таймера
	//usartState = packetSending;
	timerOverflow = 0;
	buffer_index = 0;		// Сбрасываем индекс
	buffer = data3;
 22e:	88 e1       	ldi	r24, 0x18	; 24
 230:	91 e0       	ldi	r25, 0x01	; 1
    //set_sleep_mode(SLEEP_MODE_IDLE);
	sei();

	while(1) {

	if (timerOverflow == 10) { //запускаем передачу после 10-и переполнений таймера
 232:	60 91 29 01 	lds	r22, 0x0129
 236:	6a 30       	cpi	r22, 0x0A	; 10
 238:	89 f4       	brne	.+34     	; 0x25c <main+0x54>
	timerOverflow = 11;
 23a:	e0 93 29 01 	sts	0x0129, r30
	buffer_index = 0;		// Сбрасываем индекс
 23e:	10 92 33 01 	sts	0x0133, r1
	buffer = data2;
 242:	50 93 2f 01 	sts	0x012F, r21
 246:	40 93 2e 01 	sts	0x012E, r20
	UDR0 = buffer[0];		// Отправляем первый байт
 24a:	60 91 0d 01 	lds	r22, 0x010D
 24e:	60 93 c6 00 	sts	0x00C6, r22
	UCSR0B |= (1<<UDRIE0);	// Разрешаем прерывание UDRE
 252:	60 91 c1 00 	lds	r22, 0x00C1
 256:	60 62       	ori	r22, 0x20	; 32
 258:	60 93 c1 00 	sts	0x00C1, r22
	}

	if (timerOverflow == 20) { //запускаем передачу после 10-и переполнений таймера
 25c:	60 91 29 01 	lds	r22, 0x0129
 260:	64 31       	cpi	r22, 0x14	; 20
 262:	89 f4       	brne	.+34     	; 0x286 <main+0x7e>
	//usartState = packetSending;
	timerOverflow = 21;
 264:	70 93 29 01 	sts	0x0129, r23
	buffer_index = 0;		// Сбрасываем индекс
 268:	10 92 33 01 	sts	0x0133, r1
	buffer = data1;
 26c:	30 93 2f 01 	sts	0x012F, r19
 270:	20 93 2e 01 	sts	0x012E, r18
	UDR0 = buffer[0];		// Отправляем первый байт
 274:	60 91 02 01 	lds	r22, 0x0102
 278:	60 93 c6 00 	sts	0x00C6, r22
	UCSR0B |= (1<<UDRIE0);	// Разрешаем прерывание UDRE
 27c:	60 91 c1 00 	lds	r22, 0x00C1
 280:	60 62       	ori	r22, 0x20	; 32
 282:	60 93 c1 00 	sts	0x00C1, r22
	}

	if (timerOverflow == 25) { //запускаем передачу после 10-и переполнений таймера
 286:	60 91 29 01 	lds	r22, 0x0129
 28a:	69 31       	cpi	r22, 0x19	; 25
 28c:	91 f6       	brne	.-92     	; 0x232 <main+0x2a>
	//usartState = packetSending;
	timerOverflow = 0;
 28e:	10 92 29 01 	sts	0x0129, r1
	buffer_index = 0;		// Сбрасываем индекс
 292:	10 92 33 01 	sts	0x0133, r1
	buffer = data3;
 296:	90 93 2f 01 	sts	0x012F, r25
 29a:	80 93 2e 01 	sts	0x012E, r24
	UDR0 = buffer[0];		// Отправляем первый байт
 29e:	60 91 18 01 	lds	r22, 0x0118
 2a2:	60 93 c6 00 	sts	0x00C6, r22
	UCSR0B |= (1<<UDRIE0);	// Разрешаем прерывание UDRE
 2a6:	60 91 c1 00 	lds	r22, 0x00C1
 2aa:	60 62       	ori	r22, 0x20	; 32
 2ac:	60 93 c1 00 	sts	0x00C1, r22
 2b0:	c0 cf       	rjmp	.-128    	; 0x232 <main+0x2a>

000002b2 <_exit>:
 2b2:	f8 94       	cli

000002b4 <__stop_program>:
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <__stop_program>
